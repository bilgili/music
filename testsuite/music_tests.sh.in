#!/bin/sh
#
# This script runs all tests that are located in the testsuit directory
#
#
#
#
usage ()
{
    if test $1 -ne 0 ; then
	echo "Unknown option: $2"
    fi
    
    cat <<EOF
Usage: run_tests.sh [options ...]

Options:

    --help              Print program options and exit
    --output-dir=/path  Output directory (default: ./reports)
    --test-name=""      Names of the tests to run

EOF

    exit $1
}
#
# ask_results
#
ask_results ()
{
    echo "***"
    echo "*** Please send the archived content of these directories:"
    echo "***"
    echo "***     - '${TEST_OUTDIR}'"
    echo "***     - '${TEST_TMPDIR}'"
    echo "***"
    echo "*** to the mikael@djurfeldt.com."
    echo "***"
    echo
}

requestedTest() 
{
    tn=""
    if test -n "${TEST_NAME}" ; then
	tn="${TEST_NAME%%*${1}*}"
    fi
    if test -z "${tn}" ; then
	return 0
    else
	return 1
    fi
}

run_test()
{
    TEST_TOTAL=$(( ${TEST_TOTAL} + 1 ))

    test_name="$1"
    param_success="$2"
    param_failure="$3"

    msg_error=

    TEST_OUTFILE="${TEST_OUTDIR}/$( echo "${test_name##*/}" | sed 's/\.test//'  ).log"
   
    echo "Running test '${test_name}'..."
    echo  >> "${TEST_LOGFILE}" "Running test '${test_name}'..."

    # Generating script on fly due to possible command 
    # incompatibility with different subshells (dash, bash, etc.)
    
    echo "#!/bin/sh" > "${TEST_RUNFILE}"
    echo "set +e" >> "${TEST_RUNFILE}"
    
    command="'${TEST_BASEDIR}/${test_name}' > '${TEST_OUTFILE}' 2>&1"

    echo "${command}" >> "${TEST_RUNFILE}"
    echo "echo \$? > '${TEST_RETFILE}' ; exit 0" >> "${TEST_RUNFILE}"

    chmod 755 "${TEST_RUNFILE}"
    
    time_dirty="$( /bin/sh -c "time ${TIME_PARAM} '${TEST_RUNFILE}' " 2>&1 )"

    rm -f "${TEST_RUNFILE}"

    exit_code="$(cat "${TEST_RETFILE}")"
    
    sed 's/^/   > /g' "${TEST_OUTFILE}" >> "${TEST_LOGFILE}"

    msg_dirty=${param_success##* ${exit_code} }
    msg_clean=${msg_dirty%%,*}
    if test "${msg_dirty}" != "${param_success}" ; then
        TEST_PASSED=$(( ${TEST_PASSED} + 1 ))
        explanation="${msg_clean}"
    else
        TEST_FAILED=$(( ${TEST_FAILED} + 1 ))
    
        msg_dirty=${param_failure##* ${exit_code} }
        msg_clean=${msg_dirty%%,*}
        if test "${msg_dirty}" != "${param_failure}" ; then
            explanation="${msg_clean}"
        else
            explanation="Failed: unexpected exit code ${exit_code}"
            msg_error="$( cat "${TEST_OUTFILE}" )"
        fi
    fi
    
    echo "...${explanation}"

    echo >> "${TEST_LOGFILE}" "-> ${exit_code} (${explanation})"
    echo >> "${TEST_LOGFILE}" "----------------------------------------"

    # Panic on "unexpected" exit code
    if test "x${msg_error}" != x ; then
        echo "${msg_error}"
        echo
        echo "***"
        echo "*** An unexpected exit code usually hints at a bug in the test suite!"
        ask_results
        exit 2
    fi

    rm -f "${TEST_OUTFILE}" "${TEST_RETFILE}"
}

while test $# -gt 0 ; do
    case "$1" in
	--help)
	    usage 0
	    ;;
	--output-dir=*)
	    TEST_OUTDIR="$( echo "$1" | sed 's/^--output-dir=//' )"
	    ;;
	--test-name=*)
	    TEST_NAME="$( echo "$1" | sed 's/^--test-name=//' )"
	    ;;
	*)
	    usage 1 "$1"
	    ;;
	esac
        shift
done

# Gather some information about the host
INFO_ARCH="$(uname -m)"
INFO_HOME="$(/bin/sh -c 'echo ~')"
INFO_HOST="$(hostname -f)"
INFO_OS="$(uname -s)"
INFO_USER="$(whoami)"
INFO_VER="$(uname -r)"


TIME_PARAM="-p"
/bin/sh -c "time ${TIMEPARAM} uname" >/dev/null 2>&1 || TIME_PARAM=""

TEST_OUTDIR=${TEST_OUTDIR:-"$( pwd )/reports"}
TEST_NAME=${TEST_NAME:-""}
TEST_LOGFILE="${TEST_OUTDIR}/output.log"
TEST_RETFILE="${TEST_OUTDIR}/output.ret"
TEST_RUNFILE="${TEST_OUTDIR}/runtest.sh"

if test -d "${TEST_OUTDIR}" ; then
    rm -rf "${TEST_OUTDIR}"
fi

mkdir "${TEST_OUTDIR}"

TMPDIR=${TMPDIR:-${TEST_OUTDIR}}
TEST_TMPDIR="$(mktemp -d "${TMPDIR:-/tmp}/music.XXXXX")"
MUSIC_DATA_PATH="${TEST_TMPDIR}"
export MUSIC_DATA_PATH

TEST_TOTAL=0
TEST_PASSED=0
TEST_FAILED=0

echo > "${TEST_LOGFILE}" "MUSIC v. @PACKAGE_VERSION@"
echo >> "${TEST_LOGFILE}" "======================="
echo >> "${TEST_LOGFILE}" "Host information:"
echo >> "${TEST_LOGFILE}" "architeture\t:\t${INFO_ARCH}"
echo >> "${TEST_LOGFILE}" "home directory\t:\t${INFO_HOME}"
echo >> "${TEST_LOGFILE}" "host name\t:\t${INFO_HOST}"
echo >> "${TEST_LOGFILE}" "system\t\t:\t${INFO_OS}"
echo >> "${TEST_LOGFILE}" "user name\t:\t${INFO_USER}"
echo >> "${TEST_LOGFILE}" "kernel version\t:\t${INFO_VER}"
echo >> "${TEST_LOGFILE}" "======================="

TEST_BASEDIR="@prefix@/@libdir@/@PACKAGE@_@PACKAGE_VERSION@"
echo >> "${TEST_LOGFILE}" "Running tests from ${TEST_BASEDIR}" 

CODES_SUCCESS=' 0 Success'
CODES_FAILURE=\
' 1 Failed: missed assertion,'
for test_prefix in test_ ; do
    for test_name in $(ls "${TEST_BASEDIR}" | grep "${test_prefix}*") ; do
	if requestedTest "${test_name}" ; then
	    run_test "${test_name}" "${CODES_SUCCESS}" "${CODES_FAILURE}"
	fi
    done
done

TEST_BASEDIR="@TESTSUITE_BASEDIR@"
echo >> "${TEST_LOGFILE}" "Running tests from ${TEST_BASEDIR}" 

TEST_BINARY="@prefix@/@bindir@"
export TEST_BINARY

CMP="${CMP-cmp}"
export CMP

MUSIC_BINARY="@prefix@/@bindir@/MUSIC"
export MUSIC_BINARY


CODES_SUCCESS=' 0 Success'
CODES_FAILURE=\
' 2 Failed: error in tested code block,'\
' 10 Failed: unknown error,'
for test_ext in test ; do
    for test_name in $(ls "${TEST_BASEDIR}" | grep ".*\.${test_ext}\$") ; do
	if requestedTest "${test_name}"  ; then
	    run_test "${test_name}" "${CODES_SUCCESS}" "${CODES_FAILURE}"
	fi
    done
done

if test ${TEST_FAILED} -gt 0 ; then
    echo "***"
    echo "*** There were errors detected during the run of the MUSIC test suite!"
    ask_results
else
    rm -rf "${TEST_TMPDIR}"
fi

exit 0

